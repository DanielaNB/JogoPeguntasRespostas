<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SUzUShVM7bbtf//Z
</value>
  </data>
</root>